"use server"

import { Order } from "@prisma/client"
import { RussianPostData } from "./orders"
import { sendTelegramMessage } from "./telegram"
import axios from "axios"

const AUTH_KEY = process.env.MAIL_RUSSIA_AUTHORIZATION
const X_USER_KEY = process.env.MAIL_RUSSIA_X_USER_KEY
function splitFullName(fullName: string) {
  const nameParts = fullName.split(" ")

  return {
    surname: nameParts[0], // –§–∞–º–∏–ª–∏—è
    givenName: nameParts[1], // –ò–º—è
    middleName: nameParts[2], // –û—Ç—á–µ—Å—Ç–≤–æ
  }
}
export async function postOrder(order: Order) {
  const { surname, givenName, middleName } = splitFullName(order.customerName)

  try {
    const headers = {
      Authorization: `AccessToken ${AUTH_KEY}`,
      "X-User-Authorization": `Basic ${X_USER_KEY}`,
    }

    try {
      const response = await axios.put(
        "https://otpravka-api.pochta.ru/1.0/user/backlog",
        [
          {
            "address-type-to": "DEFAULT",
            "given-name": givenName,
            "house-to": order.house,
            "index-to": order.index,
            "mail-category": "ORDINARY",
            "mail-direct": 643,
            "mail-type": "POSTAL_PARCEL",
            mass: 1540,
            "middle-name": middleName,
            "order-num": order.id,
            "place-to": order.city,
            "postoffice-code": 140007,
            "region-to": order.oblast,
            "street-to": order.street,
            surname: surname,
            "tel-address": order.customerPhone.replace(/\D/g, "").slice(-10),
            "transport-type": "SURFACE",
          },
        ],
        { headers }
      )

      const responseText = await response.data

      if (!response.status.toString().startsWith("2")) {
        throw new Error(
          `üö® –û—à–∏–±–∫–∞ HTTP!\n‚ùå –°—Ç–∞—Ç—É—Å: ${response.status}\nüîÑ –û—Ç–≤–µ—Ç: ${responseText}`
        )
      }

      let result
      try {
        result = JSON.parse(JSON.stringify(responseText))
      } catch (parseError) {
        await sendTelegramMessage({
          message: `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:\n${responseText}`,
        })
        throw parseError
      }

      await sendTelegramMessage({
        message: `üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø–æ—á—Ç–µ –†–æ—Å—Å–∏–∏

        –î–ª—è ${givenName} ${middleName} ${surname}
        –¢–µ–ª–µ—Ñ–æ–Ω ${order.customerPhone.replace(/\D/g, "").slice(-10)}
        –ê–¥—Ä–µ—Å ${order.oblast} ${order.city} ${order.street} ${order.house} ${
          order.index
        }`,
      })

      return result
    } catch (fetchError) {
      await sendTelegramMessage({
        message: "‚è≥ –¢–∞–π–º-–∞—É—Ç: –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥! ‚ùå",
      })

      await sendTelegramMessage({
        message: `‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${
          fetchError instanceof Error
            ? `${fetchError.name}: ${fetchError.message}`
            : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"
        }`,
      })
      throw fetchError
    }
  } catch (error) {
    await sendTelegramMessage({
      message: `üî• –û–±—â–∞—è –æ—à–∏–±–∫–∞:\n${
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
      }`,
    })
    throw error
  }
}
