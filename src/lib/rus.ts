"use server"

import { RussianPostData } from "./orders"
import { sendTelegramMessage } from "./telegram"
import axios from "axios"

const AUTH_KEY = process.env.MAIL_RUSSIA_AUTHORIZATION
const X_USER_KEY = process.env.MAIL_RUSSIA_X_USER_KEY

export async function postOrder(data: RussianPostData) {
  const json = JSON.stringify([data])

  try {
    await sendTelegramMessage({
      message: `üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–∫–∞–∑–∞!\nüì¶ –î–∞–Ω–Ω—ã–µ: ${json}`,
    })

    const headers = {
      Authorization: `AccessToken ${AUTH_KEY}`,
      "X-User-Authorization": `Basic ${X_USER_KEY}`,
    }

    await sendTelegramMessage({
      message: `üõ† –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:\nüîë ${JSON.stringify(headers)}`,
    })

    try {
      await sendTelegramMessage({
        message: "‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏...",
      })

      const response = await axios.put(
        "https://otpravka-api.pochta.ru/1.0/user/backlog",
        [
          {
            "address-type-to": "DEFAULT",
            "given-name": "–ö–æ–≤–∞–ª–µ–Ω–∫–æ",
            "house-to": "123",
            "index-to": 650066,
            "mail-category": "ORDINARY",
            "mail-direct": 643,
            "mail-type": "POSTAL_PARCEL",
            mass: 1540,
            "middle-name": "",
            "order-num": "ecli-1739206953494-jids",
            "place-to": "272",
            "postoffice-code": 140007,
            "region-to": "–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "street-to": "–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è",
            surname: "–†–æ–¥–∏–æ–Ω",
            "tel-address": "79609177131",
            "transport-type": "SURFACE",
          },
        ],
        { headers }
      )

      await sendTelegramMessage({
        message: `‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!\nüì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`,
      })

      const responseText = await response.data

      await sendTelegramMessage({
        message: `üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n${JSON.stringify(responseText, null, 2)}`,
      })

      if (!response.status.toString().startsWith("2")) {
        throw new Error(
          `üö® –û—à–∏–±–∫–∞ HTTP!\n‚ùå –°—Ç–∞—Ç—É—Å: ${response.status}\nüîÑ –û—Ç–≤–µ—Ç: ${responseText}`
        )
      }

      let result
      try {
        result = JSON.parse(JSON.stringify(responseText))
      } catch (parseError) {
        await sendTelegramMessage({
          message: `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:\n${responseText}`,
        })
        throw parseError
      }

      await sendTelegramMessage({
        message: `üéâ –£—Å–ø–µ—Ö! –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n${JSON.stringify(
          result,
          null,
          2
        )}`,
      })

      return result
    } catch (fetchError) {
      await sendTelegramMessage({
        message: "‚è≥ –¢–∞–π–º-–∞—É—Ç: –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥! ‚ùå",
      })

      await sendTelegramMessage({
        message: `‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${
          fetchError instanceof Error
            ? `${fetchError.name}: ${fetchError.message}`
            : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"
        }`,
      })
      throw fetchError
    }
  } catch (error) {
    await sendTelegramMessage({
      message: `üî• –û–±—â–∞—è –æ—à–∏–±–∫–∞:\n${
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
      }`,
    })
    throw error
  }
}
