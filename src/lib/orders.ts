// "use server"

// import { Order, ShipmentMethod } from "@prisma/client"
// import { z } from "zod"
// import { db } from "@/db"
// import { calculateDeliveryPrice, registerCdekOrder } from "@/lib/cdek"
// import { sendTelegramMessage } from "@/lib/telegram"
// import formSchema from "@/app/checkout/schema"
// import { postOrder } from "./rus"

// // Types
// type CreateOrderData = z.infer<typeof formSchema> & {
//   quantity: number
//   amount: number
//   orderId: string
// }

// // Schemas
// const orderNotificationSchema = z.object({
//   OrderId: z.string(),
//   Status: z.string(),
//   PaymentId: z.string(),
//   Amount: z.number(),
// })

// // Constants
// const PRODUCT_WEIGHT_GRAMS = 1540
// const PRODUCT_SKU = "jacket-001"
// const PRODUCT_NAME = "–ü—É—Ö–æ–≤–∏–∫"

// // Logger
// const logger = {
//   info: (message: string, ...args: any[]) => {
//     const timestamp = new Date().toISOString()
//     console.log(`[INFO][${timestamp}] ${message}`, ...args)
//   },
//   error: (message: string, ...args: any[]) => {
//     const timestamp = new Date().toISOString()
//     console.error(`[ERROR][${timestamp}] ${message}`, ...args)
//   },
//   debug: (message: string, ...args: any[]) => {
//     const timestamp = new Date().toISOString()
//     console.log(`[DEBUG][${timestamp}] ${message}`, ...args)
//   },
// }

// // Notification Service
// class NotificationService {
//   static async sendOrderCreated(order: Order, formData: CreateOrderData) {
//     logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ", { orderId: order.id })

//     const message = `
// üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!

// ID: ${order.id}
// –ò–º—è: ${formData.name}
// Email: ${formData.email}
// –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
// –ì–æ—Ä–æ–¥: ${formData.city}
// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${formData.quantity}
// –°—É–º–º–∞: ${formData.amount / 100} —Ä—É–±.
//     `.trim()

//     logger.debug("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", message)

//     try {
//       await sendTelegramMessage({ message })
//       logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", { orderId: order.id })
//     } catch (error) {
//       logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", {
//         orderId: order.id,
//         error,
//       })
//       throw error
//     }
//   }

//   static async sendOrderNotFound(orderId: string) {
//     logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ", { orderId })
//     await sendTelegramMessage({
//       message: `‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\nID: ${orderId}`,
//     })
//   }

//   static async sendShipmentCreated(
//     orderId: string,
//     trackingNumber: string,
//     result: any
//   ) {
//     logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ", {
//       orderId,
//       trackingNumber,
//     })
//     await sendTelegramMessage({
//       message: `üì¶ –°–æ–∑–¥–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CDEK!`,
//     })
//   }

//   static async sendShipmentError(orderId: string, error: string) {
//     logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏", {
//       orderId,
//       error,
//     })
//     await sendTelegramMessage({
//       message: `‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è CDEK!\n\n–ó–∞–∫–∞–∑: ${orderId}\n–û—à–∏–±–∫–∞: ${error}`,
//     })
//   }
// }

// // Order Service
// class OrderService {
//   static async create(formData: CreateOrderData): Promise<Order> {
//     logger.info("üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", {
//       orderId: formData.orderId,
//       formData: {
//         name: formData.name,
//         email: formData.email,
//         city: formData.city,
//         quantity: formData.quantity,
//         amount: formData.amount,
//         shipmentMethod: formData.shipment,
//       },
//     })

//     try {
//       const order = await db.order.create({
//         data: {
//           id: formData.orderId,
//           customerName: formData.name,
//           customerEmail: formData.email,
//           customerPhone: formData.phone,
//           city: formData.city,
//           shipmentMethod: formData.shipment.toUpperCase() as ShipmentMethod,
//           pickupOffice: formData.pickup_office,
//           amount: formData.amount,
//           quantity: formData.quantity,
//         },
//       })

//       logger.info("üìù –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", {
//         orderId: order.id,
//         status: order.status,
//         amount: order.amount,
//       })

//       await NotificationService.sendOrderCreated(order, formData)
//       logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", {
//         orderId: order.id,
//       })
//       return order
//     } catch (error) {
//       logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", {
//         orderId: formData.orderId,
//         error: error instanceof Error ? error.message : "Unknown error",
//       })
//       throw error
//     }
//   }

//   static async updatePaymentStatus(
//     orderId: string,
//     paymentId: string
//   ): Promise<Order> {
//     logger.info("üí≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", { orderId, paymentId })

//     try {
//       const order = await db.order.update({
//         where: { id: orderId },
//         data: {
//           status: "PAID",
//           paymentId,
//           updatedAt: new Date(),
//         },
//       })

//       logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω", {
//         orderId,
//         status: order.status,
//         paymentId: order.paymentId,
//       })

//       return order
//     } catch (error) {
//       logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", {
//         orderId,
//         paymentId,
//         error: error instanceof Error ? error.message : "Unknown error",
//       })
//       throw error
//     }
//   }

//   static async getRecentOrders(limit = 5) {
//     logger.info("üìä –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤", { limit })

//     try {
//       const orders = await db.order.findMany({
//         take: limit,
//         orderBy: { createdAt: "desc" },
//       })

//       logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", {
//         count: orders.length,
//         orderIds: orders.map((o) => o.id),
//       })

//       return orders
//     } catch (error) {
//       logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤", {
//         limit,
//         error: error instanceof Error ? error.message : "Unknown error",
//       })
//       throw error
//     }
//   }
// }

// // Shipment Service
// class ShipmentService {
//   static async preparePostData(order: Order) {
//     logger.info("üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏", {
//       orderId: order.id,
//     })

//     const phoneNumber = order.customerPhone.replace(/\D/g, "")
//     const [firstName, lastName = ""] = order.customerName.split(" ")

//     logger.debug("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", {
//       original: order.customerPhone,
//       processed: phoneNumber,
//     })

//     const postData: RussianPostData = {
//       "address-type-to": "DEFAULT",
//       "given-name": firstName,
//       "house-to": "123", // –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
//       "index-to": 650066, // –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
//       "mail-category": "ORDINARY",
//       "mail-direct": 643,
//       "mail-type": "POSTAL_PARCEL",
//       mass: PRODUCT_WEIGHT_GRAMS,
//       "middle-name": "", // –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Å—Ç–≤–∞
//       "order-num": order.id,
//       "place-to": order.city,
//       "postoffice-code": 140007,
//       "region-to": "–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", // –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –≥–æ—Ä–æ–¥—É
//       "street-to": "–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è", // –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ —É–ª–∏—Ü—ã
//       surname: lastName,
//       "tel-address": phoneNumber,
//       "transport-type": "SURFACE",
//     }

//     logger.debug("–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏", postData)
//     return postData
//   }

//   static async prepareCdekData(order: Order) {
//     logger.info("üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CDEK", { orderId: order.id })

//     const phoneNumber = order.customerPhone.replace(/\D/g, "").slice(-10)
//     logger.debug("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", {
//       original: order.customerPhone,
//       processed: phoneNumber,
//     })

//     const deliveryPrice = await calculateDeliveryPrice(Number(order.city))

//     const fromPvzCode = "LSG6"
//     const cdekData = {
//       recipient: {
//         name: order.customerName,
//         phones: [{ number: "+7" + phoneNumber }],
//       },
//       shipment_point: fromPvzCode,
//       delivery_point: order.pickupOffice,
//       tariff_code: 136,
//       packages: [
//         {
//           number: order.id,
//           weight: PRODUCT_WEIGHT_GRAMS,
//           items: [
//             {
//               name: PRODUCT_NAME,
//               ware_key: PRODUCT_SKU,
//               cost: Math.max(order.amount / 100, 1),
//               weight: PRODUCT_WEIGHT_GRAMS,
//               amount: Math.max(order.quantity, 1),
//               payment: {
//                 value: deliveryPrice,
//               },
//             },
//           ],
//           items4: [],
//         },
//       ],
//     }

//     logger.debug("–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CDEK", cdekData)
//     return cdekData
//   }

//   static async createShipment–°DEK(order: Order) {
//     logger.info("üöö –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", {
//       orderId: order.id,
//       method: order.shipmentMethod,
//     })

//     try {
//       const cdekOrderData = await this.prepareCdekData(order)
//       logger.debug(
//         "–î–∞–Ω–Ω—ã–µ –¥–ª—è API CDEK:",
//         JSON.stringify(cdekOrderData, null, 2)
//       )

//       const result = await registerCdekOrder(cdekOrderData)

//       console.log("–û—Ç–≤–µ—Ç –æ—Ç API CDEK:", result)
//       logger.info("üöö –û—Ç–≤–µ—Ç –æ—Ç API CDEK:", result)

//       if (!result.success) {
//         logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç API CDEK", {
//           orderId: order.id,
//           error: result.error,
//         })
//         await NotificationService.sendShipmentError(order.id, result.error)
//         throw new Error(`Failed to create CDEK shipment: ${result.error}`)
//       }

//       await db.order.update({
//         where: { id: order.id },
//         data: {
//           cdekOrderId: result.order.order_id,
//           status: "SHIPPING",
//         },
//       })

//       logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CDEK —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ", {
//         orderId: order.id,
//         cdekOrderId: result.order.order_id,
//       })

//       await NotificationService.sendShipmentCreated(
//         order.id,
//         result.order.order_id,
//         result
//       )

//       return result.order
//     } catch (error) {
//       logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", {
//         orderId: order.id,
//         error: error instanceof Error ? error.message : "Unknown error",
//       })
//       throw error
//     }
//   }
// }

// // Main handlers
// export async function createOrder(formData: CreateOrderData) {
//   logger.info("‚û°Ô∏è –í—Ö–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ createOrder", { orderId: formData.orderId })
//   try {
//     const order = await OrderService.create(formData)
//     logger.info("‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ createOrder", {
//       orderId: order.id,
//       status: "success",
//     })
//     return order
//   } catch (error) {
//     logger.error("‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ createOrder —Å –æ—à–∏–±–∫–æ–π", {
//       orderId: formData.orderId,
//       error: error instanceof Error ? error.message : "Unknown error",
//     })
//     throw error
//   }
// }

// export async function handlePaymentNotification(data: unknown) {
//   logger.info("‚û°Ô∏è –í—Ö–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", { data })

//   try {
//     const notification = orderNotificationSchema.parse(data)
//     logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é", {
//       orderId: notification.OrderId,
//       status: notification.Status,
//     })

//     if (notification.Status !== "CONFIRMED") {
//       logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: —Å—Ç–∞—Ç—É—Å –Ω–µ CONFIRMED", {
//         status: notification.Status,
//       })
//       return
//     }

//     const existingOrder = await db.order.findUnique({
//       where: { id: notification.OrderId },
//     })

//     if (!existingOrder) {
//       logger.error("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", { orderId: notification.OrderId })
//       await NotificationService.sendOrderNotFound(notification.OrderId)
//       return
//     }

//     logger.info("üìù –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞", {
//       orderId: existingOrder.id,
//     })

//     const updatedOrder = await OrderService.updatePaymentStatus(
//       existingOrder.id,
//       notification.PaymentId
//     )

//     logger.info("üöö –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", {
//       orderId: updatedOrder.id,
//       method: updatedOrder.shipmentMethod,
//     })
//     try {
//       switch (updatedOrder.shipmentMethod) {
//         case ShipmentMethod.SELFPICKUP:
//           return await sendTelegramMessage({
//             message: `–°–ê–ú–û–í–´–í–û–ó: ${JSON.stringify(updatedOrder)}`,
//           })

//         case ShipmentMethod.CDEK:
//           return await ShipmentService.createShipment–°DEK(updatedOrder)

//         case ShipmentMethod.POCHTA:
//           const postData = await ShipmentService.preparePostData(updatedOrder)

//           const result = await postOrder(postData)

//           await db.order.update({
//             where: { id: updatedOrder.id },
//             data: {
//               status: "SHIPPING",
//             },
//           })

//           return result

//         default:
//           throw new Error(
//             `Unsupported shipping method: ${updatedOrder.shipmentMethod}`
//           )
//       }
//     } catch (error) {
//       logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", {
//         orderId: updatedOrder.id,
//         method: updatedOrder.shipmentMethod,
//         error: error instanceof Error ? error.message : "Unknown error",
//       })
//       throw error
//     }
//   } catch (error) {
//     const errorMessage =
//       error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
//     logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", {
//       error: errorMessage,
//       data,
//     })
//     throw error
//   }
// }

export interface RussianPostData {
  "address-type-to": string
  "given-name": string
  "house-to": string
  "index-to": number
  "mail-category": string
  "mail-direct": number
  "mail-type": string
  mass: number
  "middle-name": string
  "order-num": string
  "place-to": string
  "region-to": string
  "street-to": string
  surname: string
  "tel-address": string
  "transport-type": string
  "postoffice-code": number
}

;("use server")

import { Order, ShipmentMethod } from "@prisma/client"
import { z } from "zod"
import { db } from "@/db"
import { calculateDeliveryPrice, registerCdekOrder } from "@/lib/cdek"
import { sendTelegramMessage } from "@/lib/telegram"
import formSchema from "@/app/checkout/schema"
import { postOrder } from "./rus"

// Types and Schemas
type CreateOrderData = z.infer<typeof formSchema> & {
  quantity: number
  amount: number
  orderId: string
}

const orderNotificationSchema = z.object({
  OrderId: z.string(),
  Status: z.string(),
  PaymentId: z.string(),
  Amount: z.number(),
})

// Constants
const CONSTANTS = {
  PRODUCT: {
    WEIGHT_GRAMS: 1540,
    SKU: "jacket-001",
    NAME: "–ü—É—Ö–æ–≤–∏–∫",
  },
  SHIPPING: {
    DEFAULT_PVZ_CODE: "LSG6",
    CDEK_TARIFF_CODE: 136,
  },
}

// Logger Service
class LoggerService {
  private static async logToTelegram(
    level: string,
    message: string,
    data?: any
  ) {
    const timestamp = new Date().toISOString()
    const formattedData = data ? `\n${JSON.stringify(data, null, 2)}` : ""
    await sendTelegramMessage({
      message: `[${level}][${timestamp}] ${message}${formattedData}`,
    })
  }

  static async info(message: string, data?: any) {
    console.log(`[INFO] ${message}`, data)
    await this.logToTelegram("INFO", message, data)
  }

  static async error(message: string, data?: any) {
    console.error(`[ERROR] ${message}`, data)
    await this.logToTelegram("ERROR", message, data)
  }

  static async debug(message: string, data?: any) {
    console.log(`[DEBUG] ${message}`, data)
    await this.logToTelegram("DEBUG", message, data)
  }
}

// Notification Service
class NotificationService {
  static async sendOrderCreated(order: Order, formData: CreateOrderData) {
    await LoggerService.info("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!", {
      orderId: order.id,
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      city: formData.city,
      quantity: formData.quantity,
      amount: formData.amount / 100,
    })
  }

  static async sendOrderNotFound(orderId: string) {
    await LoggerService.error("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", { orderId })
  }

  static async sendShipmentCreated(
    orderId: string,
    trackingNumber: string,
    result: any
  ) {
    await LoggerService.info("–°–æ–∑–¥–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!", {
      orderId,
      trackingNumber,
      shippingDetails: result,
    })
  }

  static async sendShipmentError(orderId: string, error: any) {
    await LoggerService.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è!", {
      orderId,
      error: error instanceof Error ? error.message : error,
    })
  }
}

// Russian Post Service
class RussianPostService {
  static async createShipment(order: Order) {
    await LoggerService.info("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏", {
      orderId: order.id,
    })

    try {
      const postData = await this.preparePostData(order)
      await LoggerService.debug(
        "–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏",
        postData
      )

      const result = await postOrder(postData)
      await LoggerService.info("–û—Ç–≤–µ—Ç –æ—Ç API –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏", result)

      await db.order.update({
        where: { id: order.id },
        data: { status: "SHIPPING" },
      })

      await NotificationService.sendShipmentCreated(
        order.id,
        result.trackingNumber,
        result
      )
      return result
    } catch (error) {
      await LoggerService.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏",
        {
          orderId: order.id,
          error,
        }
      )
      throw error
    }
  }

  private static async preparePostData(order: Order): Promise<RussianPostData> {
    const phoneNumber = order.customerPhone.replace(/\D/g, "")
    const [firstName, lastName = ""] = order.customerName.split(" ")

    return {
      "address-type-to": "DEFAULT",
      "given-name": firstName,
      "house-to": "123",
      "index-to": 650066,
      "mail-category": "ORDINARY",
      "mail-direct": 643,
      "mail-type": "POSTAL_PARCEL",
      mass: CONSTANTS.PRODUCT.WEIGHT_GRAMS,
      "middle-name": "",
      "order-num": order.id,
      "place-to": order.city,
      "postoffice-code": 140007,
      "region-to": "–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
      "street-to": "–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è",
      surname: lastName,
      "tel-address": phoneNumber,
      "transport-type": "SURFACE",
    }
  }
}

// CDEK Service
class CDEKService {
  static async createShipment(order: Order) {
    await LoggerService.info("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è CDEK", { orderId: order.id })

    try {
      const cdekData = await this.prepareCdekData(order)
      await LoggerService.debug("–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CDEK", cdekData)

      const result = await registerCdekOrder(cdekData)
      await LoggerService.info("–û—Ç–≤–µ—Ç –æ—Ç API CDEK", result)

      if (!result.success) {
        await NotificationService.sendShipmentError(order.id, result.error)
        throw new Error(`Failed to create CDEK shipment: ${result.error}`)
      }

      await db.order.update({
        where: { id: order.id },
        data: {
          cdekOrderId: result.order.order_id,
          status: "SHIPPING",
        },
      })

      await NotificationService.sendShipmentCreated(
        order.id,
        result.order.order_id,
        result
      )

      return result.order
    } catch (error) {
      await LoggerService.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è CDEK", {
        orderId: order.id,
        error,
      })
      throw error
    }
  }

  private static async prepareCdekData(order: Order) {
    const phoneNumber = order.customerPhone.replace(/\D/g, "").slice(-10)
    const deliveryPrice = await calculateDeliveryPrice(Number(order.city))

    return {
      recipient: {
        name: order.customerName,
        phones: [{ number: "+7" + phoneNumber }],
      },
      shipment_point: CONSTANTS.SHIPPING.DEFAULT_PVZ_CODE,
      delivery_point: order.pickupOffice,
      tariff_code: CONSTANTS.SHIPPING.CDEK_TARIFF_CODE,
      packages: [
        {
          number: order.id,
          weight: CONSTANTS.PRODUCT.WEIGHT_GRAMS,
          items: [
            {
              name: CONSTANTS.PRODUCT.NAME,
              ware_key: CONSTANTS.PRODUCT.SKU,
              cost: Math.max(order.amount / 100, 1),
              weight: CONSTANTS.PRODUCT.WEIGHT_GRAMS,
              amount: Math.max(order.quantity, 1),
              payment: {
                value: deliveryPrice,
              },
            },
          ],
          items4: [],
        },
      ],
    }
  }
}

// Order Service
class OrderService {
  static async create(formData: CreateOrderData): Promise<Order> {
    await LoggerService.info("–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", {
      orderId: formData.orderId,
      formData: {
        name: formData.name,
        email: formData.email,
        city: formData.city,
        quantity: formData.quantity,
        amount: formData.amount,
        shipmentMethod: formData.shipment,
      },
    })

    try {
      const order = await db.order.create({
        data: {
          id: formData.orderId,
          customerName: formData.name,
          customerEmail: formData.email,
          customerPhone: formData.phone,
          city: formData.city,
          shipmentMethod: formData.shipment.toUpperCase() as ShipmentMethod,
          pickupOffice: formData.pickup_office,
          amount: formData.amount,
          quantity: formData.quantity,
        },
      })

      await NotificationService.sendOrderCreated(order, formData)
      return order
    } catch (error) {
      await LoggerService.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", {
        orderId: formData.orderId,
        error,
      })
      throw error
    }
  }

  static async updatePaymentStatus(
    orderId: string,
    paymentId: string
  ): Promise<Order> {
    await LoggerService.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", {
      orderId,
      paymentId,
    })

    try {
      const order = await db.order.update({
        where: { id: orderId },
        data: {
          status: "PAID",
          paymentId,
          updatedAt: new Date(),
        },
      })

      await LoggerService.info("–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω", {
        orderId,
        status: order.status,
        paymentId: order.paymentId,
      })

      return order
    } catch (error) {
      await LoggerService.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", {
        orderId,
        paymentId,
        error,
      })
      throw error
    }
  }
}

// Shipping Factory
class ShippingFactory {
  static async createShipment(order: Order) {
    switch (order.shipmentMethod) {
      case ShipmentMethod.SELFPICKUP:
        await LoggerService.info("–ó–∞–∫–∞–∑ –Ω–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑", { order })
        return

      case ShipmentMethod.CDEK:
        return await CDEKService.createShipment(order)

      case ShipmentMethod.POCHTA:
        return await RussianPostService.createShipment(order)

      default:
        throw new Error(`Unsupported shipping method: ${order.shipmentMethod}`)
    }
  }
}

// Main handlers
export async function createOrder(formData: CreateOrderData) {
  await LoggerService.info("–í—Ö–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ createOrder", {
    orderId: formData.orderId,
  })

  try {
    const order = await OrderService.create(formData)
    await LoggerService.info("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", { orderId: order.id })
    return order
  } catch (error) {
    await LoggerService.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ createOrder", {
      orderId: formData.orderId,
      error,
    })
    throw error
  }
}

export async function handlePaymentNotification(data: unknown) {
  await LoggerService.info("–ü–æ–ª—É—á–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", { data })

  try {
    const notification = orderNotificationSchema.parse(data)

    if (notification.Status !== "CONFIRMED") {
      await LoggerService.info("–ü—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: —Å—Ç–∞—Ç—É—Å –Ω–µ CONFIRMED", {
        status: notification.Status,
      })
      return
    }

    const existingOrder = await db.order.findUnique({
      where: { id: notification.OrderId },
    })

    if (!existingOrder) {
      await NotificationService.sendOrderNotFound(notification.OrderId)
      return
    }

    const updatedOrder = await OrderService.updatePaymentStatus(
      existingOrder.id,
      notification.PaymentId
    )

    return await ShippingFactory.createShipment(updatedOrder)
  } catch (error) {
    await LoggerService.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", {
      error,
      data,
    })
    throw error
  }
}
