"use server"

import { Order, ShipmentMethod } from "@prisma/client"
import { z } from "zod"
import { db } from "@/db"
import { registerCdekOrder } from "@/lib/cdek"
import { sendTelegramMessage } from "@/lib/telegram"
import formSchema from "@/app/checkout/schema"

// Types
type CreateOrderData = z.infer<typeof formSchema> & {
  quantity: number
  amount: number
  orderId: string
}

type CdekShipmentData = {
  recipient: {
    name: string
    phones: { number2: string }[]
  }
  to_location: {
    city: string
  }
  packages: {
    number: string
    weight: number
    items: {
      name: string
      ware_key: string
      cost: number
      weight: number
      amount: number
    }[]
    tariff_code: number
  }[]
}

// Schemas
const orderNotificationSchema = z.object({
  OrderId: z.string(),
  Status: z.string(),
  PaymentId: z.string(),
  Amount: z.number(),
})

// Constants
const PRODUCT_WEIGHT_GRAMS = 1540
const PRODUCT_SKU = "jacket-001"
const PRODUCT_NAME = "–ü—É—Ö–æ–≤–∏–∫"

// Logger
const logger = {
  info: (message: string, ...args: any[]) => {
    const timestamp = new Date().toISOString()
    console.log(`[INFO][${timestamp}] ${message}`, ...args)
  },
  error: (message: string, ...args: any[]) => {
    const timestamp = new Date().toISOString()
    console.error(`[ERROR][${timestamp}] ${message}`, ...args)
  },
  debug: (message: string, ...args: any[]) => {
    const timestamp = new Date().toISOString()
    console.log(`[DEBUG][${timestamp}] ${message}`, ...args)
  },
}

// Notification Service
class NotificationService {
  static async sendOrderCreated(order: Order, formData: CreateOrderData) {
    logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ", { orderId: order.id })

    const message = `
üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!

ID: ${order.id}
–ò–º—è: ${formData.name}
Email: ${formData.email}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
–ì–æ—Ä–æ–¥: ${formData.city}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${formData.quantity}
–°—É–º–º–∞: ${formData.amount / 100} —Ä—É–±.
    `.trim()

    logger.debug("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", message)

    try {
      await sendTelegramMessage({ message })
      logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", { orderId: order.id })
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", {
        orderId: order.id,
        error,
      })
      throw error
    }
  }

  static async sendOrderNotFound(orderId: string) {
    logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ", { orderId })
    await sendTelegramMessage({
      message: `‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\nID: ${orderId}`,
    })
  }

  static async sendShipmentCreated(orderId: string, trackingNumber: string) {
    logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ", {
      orderId,
      trackingNumber,
    })
    await sendTelegramMessage({
      message: `üì¶ –°–æ–∑–¥–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CDEK!\n\n–ó–∞–∫–∞–∑: ${orderId}\n–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${trackingNumber}`,
    })
  }

  static async sendShipmentError(orderId: string, error: string) {
    logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏", {
      orderId,
      error,
    })
    await sendTelegramMessage({
      message: `‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è CDEK!\n\n–ó–∞–∫–∞–∑: ${orderId}\n–û—à–∏–±–∫–∞: ${error}`,
    })
  }
}

// Order Service
class OrderService {
  static async create(formData: CreateOrderData): Promise<Order> {
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", {
      orderId: formData.orderId,
      formData: {
        name: formData.name,
        email: formData.email,
        city: formData.city,
        quantity: formData.quantity,
        amount: formData.amount,
        shipmentMethod: formData.shipment,
      },
    })

    try {
      const order = await db.order.create({
        data: {
          id: formData.orderId,
          customerName: formData.name,
          customerEmail: formData.email,
          customerPhone: formData.phone,
          city: formData.city,
          shipmentMethod: formData.shipment.toUpperCase() as ShipmentMethod,
          pickupOffice: formData.pickup_office,
          amount: formData.amount,
          quantity: formData.quantity,
        },
      })

      logger.info("üìù –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", {
        orderId: order.id,
        status: order.status,
        amount: order.amount,
      })

      await NotificationService.sendOrderCreated(order, formData)
      logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", {
        orderId: order.id,
      })
      return order
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", {
        orderId: formData.orderId,
        error: error instanceof Error ? error.message : "Unknown error",
      })
      throw error
    }
  }

  static async updatePaymentStatus(
    orderId: string,
    paymentId: string
  ): Promise<Order> {
    logger.info("üí≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", { orderId, paymentId })

    try {
      const order = await db.order.update({
        where: { id: orderId },
        data: {
          status: "PAID",
          paymentId,
          updatedAt: new Date(),
        },
      })

      logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω", {
        orderId,
        status: order.status,
        paymentId: order.paymentId,
      })

      return order
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", {
        orderId,
        paymentId,
        error: error instanceof Error ? error.message : "Unknown error",
      })
      throw error
    }
  }

  static async getRecentOrders(limit = 5) {
    logger.info("üìä –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤", { limit })

    try {
      const orders = await db.order.findMany({
        take: limit,
        orderBy: { createdAt: "desc" },
      })

      logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", {
        count: orders.length,
        orderIds: orders.map((o) => o.id),
      })

      return orders
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤", {
        limit,
        error: error instanceof Error ? error.message : "Unknown error",
      })
      throw error
    }
  }
}

// Shipment Service
class ShipmentService {
  static prepareCdekData(order: Order): any {
    logger.info("üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CDEK", { orderId: order.id })

    const phoneNumber = order.customerPhone.replace(/\D/g, "").slice(-10)
    logger.debug("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", {
      original: order.customerPhone,
      processed: phoneNumber,
    })

    const cdekData = {
      recipient: {
        name: order.customerName,
        phones:
          phoneNumber.length === 10 ? [{ number: "+7" + phoneNumber }] : [], // TODO: –±—ã–ª–æ number2 )
      },
      from_location: {
        city: "–ú–æ—Å–∫–≤–∞",
        address: "–ö–æ–ª—ã–º–∞–∂–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫, 10, –ú–æ—Å–∫–≤–∞", // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
      },
      to_location: {
        city: order.city,
        address: "—É–ª–∏—Ü–∞ –∏–º–µ–Ω–∏ –ö–∞–ª–∏–Ω–∏–Ω–∞, 189, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
      },
      tariff_code: 136,
      packages: [
        {
          number: order.id,
          weight: PRODUCT_WEIGHT_GRAMS,
          items: [
            {
              name: PRODUCT_NAME,
              ware_key: PRODUCT_SKU,
              cost: Math.max(order.amount / 100, 1),
              weight: PRODUCT_WEIGHT_GRAMS,
              amount: Math.max(order.quantity, 1),
              payment: {
                value: 13500, // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
              },
            },
          ],
        },
      ],
    }

    logger.debug("–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CDEK", cdekData)
    return cdekData
  }

  static async createShipment(order: Order) {
    logger.info("üöö –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è CDEK", { orderId: order.id })

    try {
      const cdekOrderData = this.prepareCdekData(order)
      logger.debug(
        "–î–∞–Ω–Ω—ã–µ –¥–ª—è API CDEK:",
        JSON.stringify(cdekOrderData, null, 2)
      )

      const result = await registerCdekOrder(cdekOrderData)
      logger.debug("–û—Ç–≤–µ—Ç –æ—Ç API CDEK:", result)

      if (!result.success) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç API CDEK", {
          orderId: order.id,
          error: result.error,
        })
        await NotificationService.sendShipmentError(order.id, result.error)
        throw new Error(`Failed to create CDEK shipment: ${result.error}`)
      }

      const updatedOrder = await db.order.update({
        where: { id: order.id },
        data: {
          cdekOrderId: result.order.order_id,
          status: "SHIPPING",
        },
      })

      logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CDEK —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ", {
        orderId: order.id,
        cdekOrderId: result.order.order_id,
      })

      await NotificationService.sendShipmentCreated(
        order.id,
        result.order.order_id
      )

      return result.order
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", {
        orderId: order.id,
        error: error instanceof Error ? error.message : "Unknown error",
      })
      throw error
    }
  }
}

// Main handlers
export async function createOrder(formData: CreateOrderData) {
  logger.info("‚û°Ô∏è –í—Ö–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ createOrder", { orderId: formData.orderId })
  try {
    const order = await OrderService.create(formData)
    logger.info("‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ createOrder", {
      orderId: order.id,
      status: "success",
    })
    return order
  } catch (error) {
    logger.error("‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ createOrder —Å –æ—à–∏–±–∫–æ–π", {
      orderId: formData.orderId,
      error: error instanceof Error ? error.message : "Unknown error",
    })
    throw error
  }
}

export async function handlePaymentNotification(data: unknown) {
  logger.info("‚û°Ô∏è –í—Ö–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", { data })

  try {
    const notification = orderNotificationSchema.parse(data)
    logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é", {
      orderId: notification.OrderId,
      status: notification.Status,
    })

    if (notification.Status !== "CONFIRMED") {
      logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: —Å—Ç–∞—Ç—É—Å –Ω–µ CONFIRMED", {
        status: notification.Status,
      })
      return
    }

    const existingOrder = await db.order.findUnique({
      where: { id: notification.OrderId },
    })

    if (!existingOrder) {
      logger.error("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", { orderId: notification.OrderId })
      await NotificationService.sendOrderNotFound(notification.OrderId)
      return
    }

    logger.info("üìù –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞", {
      orderId: existingOrder.id,
    })

    const updatedOrder = await OrderService.updatePaymentStatus(
      existingOrder.id,
      notification.PaymentId
    )

    logger.info("üöö –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", { orderId: updatedOrder.id })
    await ShipmentService.createShipment(updatedOrder)

    logger.info("‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", {
      orderId: notification.OrderId,
      status: "success",
    })
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
    logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", {
      error: errorMessage,
      data,
    })
    throw error
  }
}
