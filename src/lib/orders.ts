"use server"
import { Order, Prisma, ShipmentMethod } from "@prisma/client"
import { registerCdekOrder } from "@/lib/cdek"
import { z } from "zod"
import formSchema from "@/app/checkout/schema"
import { db } from "@/db"
import { sendTelegramMessage } from "@/lib/telegram"
import { generateOrderId } from "@/lib/utils"

const orderNotificationSchema = z.object({
  OrderId: z.string(),
  Status: z.string(),
  PaymentId: z.string(),
  Amount: z.number(),
})

const prisma = db

export async function createOrder(
  formData: z.infer<typeof formSchema> & {
    quantity: number
    amount: number
  }
) {
  console.log("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...", {
    name: formData.name,
    email: formData.email,
    shipmentMethod: formData.shipment,
  })

  const tinkoffOrderId = generateOrderId(formData.email)

  const order = await prisma.order.create({
    data: {
      id: tinkoffOrderId,
      customerName: formData.name,
      customerEmail: formData.email,
      customerPhone: formData.phone,
      city: formData.city,
      shipmentMethod: formData.shipment.toUpperCase() as ShipmentMethod,
      pickupOffice: formData.pickup_office,
      amount: formData.amount,
      quantity: formData.quantity,
    },
  })

  await sendTelegramMessage({
    message: `üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n\n–ò–º—è: ${formData.name}\nEmail: ${
      formData.email
    }\n–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}\n–ì–æ—Ä–æ–¥: ${formData.city}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${
      formData.quantity
    }\n–°—É–º–º–∞: ${formData.amount / 100} —Ä—É–±.`,
  })

  console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", order.id)
  return order
}

export async function handlePaymentNotification(data: unknown) {
  console.log("üí∞ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ:", data)

  const notification = orderNotificationSchema.parse(data)

  if (notification.Status === "CONFIRMED") {
    await sendTelegramMessage({
      message: `
üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞...
ID –¥–ª—è –ø–æ–∏—Å–∫–∞: ${notification.OrderId}
PaymentId: ${notification.PaymentId}
–°—É–º–º–∞: ${notification.Amount / 100} ‚ÇΩ
      `.trim(),
    })

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
    const recentOrders = await prisma.order.findMany({
      take: 5,
      orderBy: { createdAt: "desc" },
    })

    await sendTelegramMessage({
      message: `
üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –±–∞–∑–µ:
${recentOrders
  .map(
    (order) => `
- ID: ${order.id}
  –°—Ç–∞—Ç—É—Å: ${order.status}
  –ö–ª–∏–µ–Ω—Ç: ${order.customerName}
  –°—É–º–º–∞: ${order.amount / 100} ‚ÇΩ
  –°–æ–∑–¥–∞–Ω: ${order.createdAt.toLocaleString("ru-RU")}`
  )
  .join("\n")}
      `.trim(),
    })

    const existingOrder = await prisma.order.findUnique({
      where: { id: notification.OrderId },
    })

    await sendTelegramMessage({
      message: `
${existingOrder ? "‚úÖ" : "‚ùå"} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞:
–ò—Å–∫–æ–º—ã–π ID: ${notification.OrderId}
${
  existingOrder
    ? `–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑:
  - ID: ${existingOrder.id}
  - –°—Ç–∞—Ç—É—Å: ${existingOrder.status}
  - –ö–ª–∏–µ–Ω—Ç: ${existingOrder.customerName}
  - Email: ${existingOrder.customerEmail}
  - –°—É–º–º–∞: ${existingOrder.amount / 100} ‚ÇΩ`
    : "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
}
      `.trim(),
    })

    if (!existingOrder) {
      console.error("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
      return
    }

    try {
      const order = await prisma.order.update({
        where: { id: existingOrder.id },
        data: {
          status: "PAID",
          paymentId: notification.PaymentId,
          updatedAt: new Date(),
        },
      })

      await sendTelegramMessage({
        message: `
‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:
ID: ${order.id}
–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${order.status}
PaymentId: ${order.paymentId}
        `.trim(),
      })
    } catch (error) {
      await sendTelegramMessage({
        message: `
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:
ID: ${existingOrder.id}
–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}
        `.trim(),
      })
      throw error
    }
  }
}

async function createCdekShipment(order: Order) {
  console.log("üì¶ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CDEK...", order.id)

  const cdekOrderData = {
    recipient: {
      name: order.customerName,
      phones: [
        {
          number2: order.customerPhone,
        },
      ],
    },
    to_location: {
      city: order.city,
    },
    packages: [
      {
        number: order.id,
        weight: 1000, // Weight in grams
        items: [
          {
            name: "–ü—É—Ö–æ–≤–∏–∫",
            ware_key: "jacket-001",
            cost: order.amount / 100, // Convert from kopeks to rubles
            weight: 1000,
            amount: order.quantity,
          },
        ],
      },
    ],
  }

  const result = await registerCdekOrder(cdekOrderData)

  if (result.success) {
    console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CDEK —Å–æ–∑–¥–∞–Ω–æ:", result.order.order_id)

    await prisma.order.update({
      where: { id: order.id },
      data: {
        cdekOrderId: result.order.order_id,
        status: "SHIPPING",
      },
    })

    await sendTelegramMessage({
      message: `üì¶ –°–æ–∑–¥–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CDEK!\n\n–ó–∞–∫–∞–∑: ${order.id}\n–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${result.order.order_id}`,
    })
  } else {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è CDEK:", result.error)

    await sendTelegramMessage({
      message: `‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è CDEK!\n\n–ó–∞–∫–∞–∑: ${order.id}\n–û—à–∏–±–∫–∞: ${result.error}`,
    })
  }
}
