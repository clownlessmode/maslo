import { handlePaymentNotification } from "@/lib/orders"
import { NextResponse } from "next/server"
import { sendTelegramMessage } from "@/lib/telegram"
import { z } from "zod"
import { db } from "@/db"

// Validation schema for payment notification
const paymentNotificationSchema = z.object({
  Status: z.enum([
    "AUTHORIZED",
    "CONFIRMED",
    "PARTIAL_REVERSED",
    "REVERSED",
    "CANCELED",
    "PARTIAL_REFUNDED",
    "REFUNDED",
    "REJECTED",
    "DEADLINE_EXPIRED",
  ]),
  OrderId: z.string(),
  PaymentId: z.union([z.string(), z.number()]),
  Amount: z.number(),
  Pan: z.string().optional(),
  ExpDate: z.string().optional(),
  Success: z.boolean().optional(),
  ErrorCode: z.string().optional(),
  TerminalKey: z.string().optional(),
  Token: z.string().optional(),
})

const getStatusEmoji = (status: string) => {
  switch (status) {
    case "CONFIRMED":
      return "‚úÖ"
    case "AUTHORIZED":
      return "üîÑ"
    case "CANCELED":
      return "‚ùå"
    case "REJECTED":
      return "‚õî"
    case "REFUNDED":
      return "üí∞"
    case "DEADLINE_EXPIRED":
      return "‚è∞"
    default:
      return "‚ÑπÔ∏è"
  }
}

const getStatusMessage = (status: string) => {
  switch (status) {
    case "CONFIRMED":
      return "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞"
    case "AUTHORIZED":
      return "–ü–ª–∞—Ç—ë–∂ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
    case "CANCELED":
      return "–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω"
    case "REJECTED":
      return "–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω"
    case "REFUNDED":
      return "–ü–ª–∞—Ç—ë–∂ –≤–æ–∑–≤—Ä–∞—â—ë–Ω"
    case "DEADLINE_EXPIRED":
      return "–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ"
    default:
      return "–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑–º–µ–Ω—ë–Ω"
  }
}

export async function POST(request: Request) {
  try {
    const data = await request.json()
    console.log("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", data)

    const validatedData = paymentNotificationSchema.safeParse(data)

    if (!validatedData.success) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", {
        error: validatedData.error,
        receivedData: data,
      })

      await sendTelegramMessage({
        message: `
‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

‚ùå –û—à–∏–±–∫–∞: ${JSON.stringify(validatedData.error.errors)}
üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(data)}
‚è± –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
        `.trim(),
      })

      return new NextResponse("Invalid notification data", { status: 400 })
    }

    const { Status, OrderId, Amount } = validatedData.data

    const emoji = getStatusEmoji(Status)
    const statusMessage = getStatusMessage(Status)

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `
${emoji} ${statusMessage}

üîñ –ó–∞–∫–∞–∑: #${OrderId}
üíµ –°—É–º–º–∞: ${Amount ? (Amount / 100).toLocaleString("ru-RU") + " ‚ÇΩ" : "–Ω/–¥"}
${
  validatedData.data.Pan
    ? "üí≥ –ö–∞—Ä—Ç–∞: " +
      validatedData.data.Pan.replace(/^(\d{6})\d+(\d{4})$/, "$1******$2")
    : ""
}
‚è± –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
    `.trim()

    await sendTelegramMessage({ message })

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    if (Status === "CONFIRMED") {
      console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:", OrderId)
      await andlePaymentNotification({
        ...validatedData.data,
        PaymentId: String(validatedData.data.PaymentId),
      })
    }

    return new NextResponse("OK", { status: 200 })
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error)

    await sendTelegramMessage({
      message: `
‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞

‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}
‚è± –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
      `.trim(),
    })

    return new NextResponse("Error processing notification", { status: 500 })
  }
}
